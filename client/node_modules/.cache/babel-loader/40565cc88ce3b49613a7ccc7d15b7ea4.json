{"ast":null,"code":"var _jsxFileName = \"E:\\\\Complete React GraphQL ContextAPI Firebase\\\\crown-clothing\\\\src\\\\pages\\\\shop\\\\shop.component.jsx\";\nimport React from 'react';\nimport { Route } from 'react-router-dom';\nimport { createStructuredSelector } from 'reselect';\nimport { connect } from 'react-redux';\nimport WithSpinner from '../../components/with-spinner/with-spinner.component';\nimport CollectionsOverview from '../../components/collections-overview/collections-overview.component';\nimport CollectionPage from '../collection/collection.component';\nimport { fetchCollectionsStartAsync } from '../../redux/shop/shop.actions';\nimport { selectIsCollectionFetching, selectIsCollectionsLoaded } from '../../redux/shop/shop.selectors';\nconst CollectionOverviewWithSpinner = WithSpinner(CollectionsOverview);\nconst CollectionPageWithSpinner = WithSpinner(CollectionPage);\n\nclass ShopPage extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      loading: true\n    };\n    this.unsubscribeFromSnapshot = null;\n  }\n\n  componentDidMount() {\n    const {\n      fetchCollectionsStartAsync\n    } = this.props;\n    fetchCollectionsStartAsync(); // const { updateCollections } = this.props;\n    // const collectionRef = firestore.collection('collections');\n    // //1. firebase store snapshot\n    // // this.unsubscribeFromSnapshot = collectionRef.onSnapshot(async snapshot => {\n    // //     const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n    // //     updateCollections(collectionsMap);\n    // //     this.setState({ loading: false });\n    // // });\n    // //2. promise\n    // collectionRef.get().then(snapshot => {\n    //     const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n    //     updateCollections(collectionsMap);\n    //     this.setState({ loading: false });\n    // });\n    //3. fetch\n    // fetch('https://firestore.googleapis.com/v1/projects/crown-db-e0e73/databases/(default)/documents/collections')\n    // .then(response => response.json())\n    // .then(collections => console.log(collections));\n  }\n\n  render() {\n    const {\n      match,\n      isCollectionFetching,\n      isCollectionsLoaded\n    } = this.props;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"shop-page\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Route, {\n      exact: true,\n      path: `${match.path}`,\n      render: props => /*#__PURE__*/React.createElement(CollectionOverviewWithSpinner, Object.assign({\n        isLoading: isCollectionFetching\n      }, props, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 73\n        }\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(Route, {\n      path: `${match.path}/:collectionId`,\n      render: props => /*#__PURE__*/React.createElement(CollectionPageWithSpinner, Object.assign({\n        isLoading: isCollectionFetching\n      }, props, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 81\n        }\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 17\n      }\n    }));\n  }\n\n}\n\nconst mapStateToProps = createStructuredSelector({\n  isCollectionFetching: selectIsCollectionFetching,\n  isCollectionsLoaded: selectIsCollectionsLoaded\n});\n\nconst mapDispatchToProps = dispatch => ({\n  fetchCollectionsStartAsync: () => dispatch(fetchCollectionsStartAsync())\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ShopPage);","map":{"version":3,"sources":["E:/Complete React GraphQL ContextAPI Firebase/crown-clothing/src/pages/shop/shop.component.jsx"],"names":["React","Route","createStructuredSelector","connect","WithSpinner","CollectionsOverview","CollectionPage","fetchCollectionsStartAsync","selectIsCollectionFetching","selectIsCollectionsLoaded","CollectionOverviewWithSpinner","CollectionPageWithSpinner","ShopPage","Component","state","loading","unsubscribeFromSnapshot","componentDidMount","props","render","match","isCollectionFetching","isCollectionsLoaded","path","mapStateToProps","mapDispatchToProps","dispatch"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,QAAsB,kBAAtB;AACA,SAASC,wBAAT,QAAwC,UAAxC;AACA,SAASC,OAAT,QAAwB,aAAxB;AAEA,OAAOC,WAAP,MAAyB,sDAAzB;AAEA,OAAOC,mBAAP,MAAgC,sEAAhC;AACA,OAAOC,cAAP,MAA2B,oCAA3B;AAGA,SAASC,0BAAT,QAA2C,+BAA3C;AACA,SAASC,0BAAT,EAAqCC,yBAArC,QAAsE,iCAAtE;AAEA,MAAMC,6BAA6B,GAAGN,WAAW,CAACC,mBAAD,CAAjD;AACA,MAAMM,yBAAyB,GAAGP,WAAW,CAACE,cAAD,CAA7C;;AAEA,MAAMM,QAAN,SAAuBZ,KAAK,CAACa,SAA7B,CAAuC;AAAA;AAAA;AAAA,SACnCC,KADmC,GAC3B;AACJC,MAAAA,OAAO,EAAE;AADL,KAD2B;AAAA,SAKnCC,uBALmC,GAKT,IALS;AAAA;;AAOnCC,EAAAA,iBAAiB,GAAG;AAEhB,UAAM;AAAEV,MAAAA;AAAF,QAAiC,KAAKW,KAA5C;AACAX,IAAAA,0BAA0B,GAHV,CAKhB;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACH;;AAEDY,EAAAA,MAAM,GAAG;AACL,UAAM;AAAEC,MAAAA,KAAF;AAASC,MAAAA,oBAAT;AAA+BC,MAAAA;AAA/B,QAAuD,KAAKJ,KAAlE;AAEA,wBACI;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,KAAD;AAAO,MAAA,KAAK,MAAZ;AAAa,MAAA,IAAI,EAAG,GAAEE,KAAK,CAACG,IAAK,EAAjC;AAAoC,MAAA,MAAM,EAAGL,KAAD,iBAAY,oBAAC,6BAAD;AAA+B,QAAA,SAAS,EAAEG;AAA1C,SAAoEH,KAApE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,eAEI,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAG,GAAEE,KAAK,CAACG,IAAK,gBAA3B;AAA4C,MAAA,MAAM,EAAGL,KAAD,iBAAY,oBAAC,yBAAD;AAA2B,QAAA,SAAS,EAAEG;AAAtC,SAAgEH,KAAhE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAhE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,CADJ;AAMH;;AA7CkC;;AAgDvC,MAAMM,eAAe,GAAGtB,wBAAwB,CAAC;AAC7CmB,EAAAA,oBAAoB,EAAEb,0BADuB;AAE7Cc,EAAAA,mBAAmB,EAAEb;AAFwB,CAAD,CAAhD;;AAKA,MAAMgB,kBAAkB,GAAGC,QAAQ,KAAK;AACpCnB,EAAAA,0BAA0B,EAAE,MAAMmB,QAAQ,CAACnB,0BAA0B,EAA3B;AADN,CAAL,CAAnC;;AAIA,eAAeJ,OAAO,CAACqB,eAAD,EAAkBC,kBAAlB,CAAP,CAA6Cb,QAA7C,CAAf","sourcesContent":["import React from 'react';\r\nimport { Route } from 'react-router-dom';\r\nimport { createStructuredSelector} from 'reselect';\r\nimport { connect } from 'react-redux';\r\n\r\nimport WithSpinner  from '../../components/with-spinner/with-spinner.component';\r\n\r\nimport CollectionsOverview from '../../components/collections-overview/collections-overview.component';\r\nimport CollectionPage from '../collection/collection.component';\r\n\r\n\r\nimport { fetchCollectionsStartAsync } from '../../redux/shop/shop.actions';\r\nimport { selectIsCollectionFetching, selectIsCollectionsLoaded } from '../../redux/shop/shop.selectors';\r\n\r\nconst CollectionOverviewWithSpinner = WithSpinner(CollectionsOverview);\r\nconst CollectionPageWithSpinner = WithSpinner(CollectionPage);\r\n\r\nclass ShopPage extends React.Component {\r\n    state = {\r\n        loading: true\r\n    };\r\n\r\n    unsubscribeFromSnapshot = null;\r\n\r\n    componentDidMount() {\r\n\r\n        const { fetchCollectionsStartAsync } = this.props;\r\n        fetchCollectionsStartAsync();\r\n\r\n        // const { updateCollections } = this.props;\r\n        // const collectionRef = firestore.collection('collections');\r\n\r\n\r\n        // //1. firebase store snapshot\r\n        // // this.unsubscribeFromSnapshot = collectionRef.onSnapshot(async snapshot => {\r\n        // //     const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\r\n        // //     updateCollections(collectionsMap);\r\n        // //     this.setState({ loading: false });\r\n        // // });\r\n\r\n        // //2. promise\r\n        // collectionRef.get().then(snapshot => {\r\n        //     const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\r\n        //     updateCollections(collectionsMap);\r\n        //     this.setState({ loading: false });\r\n        // });\r\n\r\n        //3. fetch\r\n        // fetch('https://firestore.googleapis.com/v1/projects/crown-db-e0e73/databases/(default)/documents/collections')\r\n        // .then(response => response.json())\r\n        // .then(collections => console.log(collections));\r\n    }\r\n\r\n    render() {\r\n        const { match, isCollectionFetching, isCollectionsLoaded } = this.props;\r\n        \r\n        return (\r\n            <div className=\"shop-page\">\r\n                <Route exact path={`${match.path}`} render={(props) => (<CollectionOverviewWithSpinner isLoading={isCollectionFetching} {...props}/>)} />\r\n                <Route path={`${match.path}/:collectionId`} render={(props) => (<CollectionPageWithSpinner isLoading={isCollectionFetching} {...props} />)} />\r\n            </div>\r\n        );\r\n    };\r\n}  \r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n    isCollectionFetching: selectIsCollectionFetching,\r\n    isCollectionsLoaded: selectIsCollectionsLoaded  \r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    fetchCollectionsStartAsync: () => dispatch(fetchCollectionsStartAsync())\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ShopPage);"]},"metadata":{},"sourceType":"module"}